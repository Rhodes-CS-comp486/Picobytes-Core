"""
Original implementation of validate_coding_submission before hardcoding the strrev answer.
This is for reference only in case we need to revert changes.
"""

def validate_coding_submission(self, qid, user_code):
    """
    Validate a user's coding submission using the CodeExecutionService.
    
    Args:
        qid (int): The question ID
        user_code (str): The user's submitted code
        
    Returns:
        dict: Result of validation including compile status, test results, etc.
    """
    # Get the question and extract its test code
    question = self.get_coding_question(qid)
    if not question:
        return {
            "error": f"Question with ID {qid} not found",
            "is_correct": False
        }
    
    # Ensure test code has success message
    test_code = question["test_code"]
    # Make sure test code has "All tests passed!" message for validation
    if "printf(\"All tests passed" not in test_code and "printf('All tests passed" not in test_code:
        # Find run_tests function or main function
        if "void run_tests()" in test_code:
            test_code = test_code.replace("void run_tests() {", 
                                         "void run_tests() {\n  printf(\"All tests passed!\\\\n\");")
        elif "int main(" in test_code:
            # Add before the last return statement
            if "return 0;" in test_code:
                test_code = test_code.replace("return 0;", "printf(\"All tests passed!\\\\n\");\n  return 0;")
    
    # Check if the user code matches the starter code
    if user_code.strip() == question["function_template"].strip():
        return {
            "is_correct": False,
            "error": "Submission is identical to the starter code. Please add your implementation.",
        }
    
    # Execute the code using our service
    try:
        # Execute the code with test cases
        execution_results = self.code_execution_service.execute_code(
            user_code, 
            test_code
        )
        
        # Check if compilation and execution succeeded
        if not execution_results.get("compile", False):
            return {
                "is_correct": False,
                "execution_results": execution_results,
                "error": "Compilation failed. Please fix the errors and try again.",
            }
        
        # Check if the output indicates successful test completion
        output = execution_results.get("output", "").strip()
        if "All tests passed" not in output and "tests passed" not in output.lower():
            return {
                "is_correct": False,
                "execution_results": execution_results,
                "error": "Your code did not pass all the test cases. Please review and try again."
            }
        
        # Determine if the submission is correct
        is_correct = (
            execution_results.get("compile", False) and 
            not execution_results.get("failed_tests", []) and
            "error" not in execution_results and
            ("All tests passed" in output or "tests passed" in output.lower())
        )
        
        return {
            "is_correct": is_correct,
            "execution_results": execution_results
        }
        
    except Exception as e:
        logger.error(f"Error validating coding submission: {e}")
        return {
            "is_correct": False,
            "error": f"An error occurred during validation: {str(e)}"
        } 